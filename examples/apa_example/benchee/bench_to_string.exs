inputs = %{
  "1 Digits Integer" => {3, 6},
  "30 Digits Integer" =>
    {123_456_789_012_345_678_901_234_567_890, 987_654_321_098_765_432_109_876_543_210},
  "606 Digits Integer" =>
    {123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_011_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_112_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_011_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_112_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901,
     893_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_011_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_112_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_011_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_112_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_999}
}

bench = %{
  # To String Convert with standard precision and scale
  "Decimal.to_string() Int" => fn {l, r} ->
    Decimal.to_string(%Decimal{sign: 1, coef: l, exp: 0})
  end,
  "Apa.to_string()     Int" => fn {l, r} ->
    Apa.to_string({l, 0})
  end,
  "Decimal.to_string() Dec" => fn {l, r} ->
    Decimal.to_string(%Decimal{sign: 1, coef: l, exp: -3})
  end,
  "Apa.to_string()     Dec" => fn {l, r} ->
    Apa.to_string({l, -3})
  end,

  # To String Convert with special value "9" for precision/scale
  "Decimal.to_string() Int/precison 9:" => fn {l, r} ->
    Decimal.Context.set(%Decimal.Context{Decimal.Context.get() | precision: 9})
    Decimal.to_string(%Decimal{sign: 1, coef: l, exp: 0})
  end,
  "Apa.to_string()     Int/precison 9:" => fn {l, r} ->
    Apa.to_string({l, 0})
  end,
  "Decimal.to_string() Dec/precison 9:" => fn {l, r} ->
    Decimal.Context.set(%Decimal.Context{Decimal.Context.get() | precision: 9})
    Decimal.to_string(%Decimal{sign: 1, coef: l, exp: -3})
  end,
  "Apa.to_string()     Dec/precison 9:" => fn {l, r} ->
    Apa.to_string({l, -3}, -1, 9)
  end
}

Benchee.run(bench,
  inputs: inputs,
  time: 6,
  warmup: 6,
  memory_time: 1,
  print: [fast_warning: false]
)
