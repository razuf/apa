inputs = %{
  # "1 Digits Integer" => {6, 9},
  # "6 Digits Integer" => {123_456, 654_321},
  # "15 Digits Integer" => {123_456_789_012_345, 543_210_987_654_321},
  # "22 Digits Integer" => {1_234_567_890_123_456_789_012, 9_876_543_210_987_654_321_098},
  # "23 Digits Integer" =>
  #   {12_345_678_901_234_567_890_123, 98_765_432_109_876_543_210_987},
  # "30 Digits Integer" =>
  #   {123_456_789_012_345_678_901_234_567_891, 987_654_321_098_765_432_109_876_543_211},
  # "42 Digits Integer" =>
  #   {123_456_789_012_345_678_901_234_567_890_123_456_789_012,
  #    987_654_321_012_987_654_321_098_765_432_109_876_543_211},
  # "60 Digits Integer" =>
  #   {123_456_789_012_345_678_901_234_567_891_123_456_789_012_345_678_901_234_567_891,
  #    987_654_321_098_765_432_109_876_543_211_987_654_321_098_765_432_109_876_543_211},
  # "606 Digits Integer" =>
  #   {123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_011_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_112_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_011_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_112_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901,
  #    893_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_011_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_112_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_011_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_112_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789_012_345_678_999}
  # "1 Digits Integer as String" => {"6", "9"},
  # "6 Digits Integer as String" => {"123456", "654321"},
  # "15 Digits Integer as String" => {"123456789012345", "543210987654321"},
  # "22 Digits Integer as String" => {"1234567890123456789012", "9876543210987654321098"},
  # "23 Digits Integer as String" =>
  #   {"12345678901234567890123", "98765432109876543210987"},
  # "30 Digits Integer as String" =>
  #   {"123456789012345678901234567891", "987654321098765432109876543211"},
  # "40 Digits Integer as String" =>
  #   {"1234567890123456789012345678901234567890", "9876543210129876543210987654321098765432"},
  # "42 Digits Integer as String" =>
  #   {"123456789012345678901234567890123456789012", "987654321012987654321098765432109876543298"},
  # "50 Digits Integer as String" =>
  #   {"12345678901234567890123456789012345678901234567890",
  #    "98765432101298765432109876543210987654321098765432"}
  # "60 Digits Integer as String" =>
  #   {"123456789012345678901234567891123456789012345678901234567891",
  #    "987654321098765432109876543211987654321098765432109876543211"},
  # "120 Digits Integer as String" =>
  #   {"123456789012345678901234567891123456789012345678901234567891123456789012345678901234567891123456789012345678901234567891",
  #    "987654321098765432109876543211987654321098765432109876543211987654321098765432109876543211987654321098765432109876543211"},
  # "240 Digits Integer as String" =>
  #   {"123456789012345678901234567891123456789012345678901234567891123456789012345678901234567891123456789012345678901234567891123456789012345678901234567891123456789012345678901234567891123456789012345678901234567891123456789012345678901234567891",
  #    "987654321098765432109876543211987654321098765432109876543211987654321098765432109876543211987654321098765432109876543211987654321098765432109876543211987654321098765432109876543211987654321098765432109876543211987654321098765432109876543211"},
  # "606 Digits Integer as String" =>
  #   {
  #    "893456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678999"}

  "42 Digits Dec as String" =>
    {"123.456789012345678901234567890123456789012", "9.87654321012987654321098765432109876543298"},
  "606 Digits Dec as String" =>
    {"123.456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901",
     "89.3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678999"}
}

bench = %{
  # Addition -  Integer values
  "Decimal.add() Int" => fn {l, r} ->
    # Decimal.add(%Decimal{sign: 1, coef: l, exp: 0}, %Decimal{sign: 1, coef: r, exp: 0})
    # |> Decimal.to_string()
    Decimal.add(l, r)
    |> Decimal.to_string()
  end,
  "Apa.add()     Int" => fn {l, r} ->
    # Apa.add({l, 0}, {r, 0})
    Apa.add(l, r)
  end

  # # Addition - Decimalpoint values
  # "Decimal.add() Dec" => fn {l, r} ->
  #   Decimal.add(%Decimal{sign: 1, coef: l, exp: -12}, %Decimal{sign: 1, coef: r, exp: 12})
  #   |> Decimal.to_string()
  # end,
  # "Apa.add() Dec" => fn {l, r} ->
  #   Apa.add({l, -12}, {r, 12})
  # end
}

Benchee.run(bench,
  inputs: inputs,
  time: 6,
  warmup: 6,
  memory_time: 1,
  print: [fast_warning: false]
)

# bench = %{
#   # Subtraction -  Integer values
#   "Decimal.sub() Int" => fn {l, r} ->
#     Decimal.sub(%Decimal{sign: 1, coef: l, exp: 0}, %Decimal{sign: 1, coef: r, exp: 0})
#     |> Decimal.to_string()
#   end,
#   "Apa.sub() Int" => fn {l, r} ->
#     Apa.sub({l, 0}, {r, 0})
#   end,

#   # Subtraction -  Decimalpoint values
#   "Decimal.sub() Dec" => fn {l, r} ->
#     Decimal.sub(%Decimal{sign: 1, coef: l, exp: -12}, %Decimal{sign: 1, coef: r, exp: 12})
#     |> Decimal.to_string()
#   end,
#   "Apa.sub() Dec" => fn {l, r} ->
#     Apa.sub({l, -12}, {r, 12})
#   end
# }

# Benchee.run(bench,
#   inputs: inputs,
#   time: 6,
#   warmup: 1,
#   memory_time: 1,
#   print: [fast_warning: false]
#   # save: [path: "apa_benchee_path"]
# )

# bench = %{
#   # Multiplication -  Integer values
#   "Decimal.mult() Int" => fn {l, r} ->
#     Decimal.mult(%Decimal{sign: 1, coef: l, exp: 0}, %Decimal{sign: 1, coef: r, exp: 0})
#     |> Decimal.to_string()
#   end,
#   "Apa.mul() Int" => fn {l, r} ->
#     Apa.mul({l, 0}, {r, 0})
#   end,

#   # Multiplication -  Decimalpoint values
#   "Decimal.mult() Dec" => fn {l, r} ->
#     Decimal.mult(%Decimal{sign: 1, coef: l, exp: -12}, %Decimal{sign: 1, coef: r, exp: 12})
#     |> Decimal.to_string()
#   end,
#   "Apa.mul() Dec" => fn {l, r} ->
#     Apa.mul({l, -12}, {r, 12})
#   end
# }

# Benchee.run(bench,
#   inputs: inputs,
#   time: 6,
#   warmup: 1,
#   memory_time: 1,
#   print: [fast_warning: false]
#   # save: [path: "apa_benchee_path"]
# )

# bench = %{
#   # Division -  Integer values
#   "Decimal.div() Int" => fn {l, r} ->
#     Decimal.div(%Decimal{sign: 1, coef: l, exp: 0}, %Decimal{sign: 1, coef: r, exp: 0})
#     |> Decimal.to_string()
#   end,
#   "Apa.div() Int" => fn {l, r} ->
#     Apa.div({l, 0}, {r, 0})
#   end,

#   # Division -  Decimalpoint values
#   "Decimal.div() Dec" => fn {l, r} ->
#     Decimal.div(%Decimal{sign: 1, coef: l, exp: -12}, %Decimal{sign: 1, coef: r, exp: 12})
#     |> Decimal.to_string()
#   end,
#   "Apa.div() Dec" => fn {l, r} ->
#     Apa.div({l, -12}, {r, 12})
#   end
# }

# Benchee.run(bench,
#   inputs: inputs,
#   time: 6,
#   warmup: 1,
#   memory_time: 1,
#   print: [fast_warning: false]
#   # save: [path: "apa_benchee_path"]
# )
