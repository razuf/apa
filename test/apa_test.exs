defmodule ApaTest do
  @moduledoc """
  Documentation for `ApaTest`.
  """
  use ExUnit.Case
  import Apa
  import Kernel, except: [+: 2, -: 2, *: 2, /: 2, to_string: 1, abs: 1]

  doctest Apa
  doctest ApaNumber

  test "wrong input" do
    assert_raise ArgumentError, fn -> Apa.parse([1, 2, 3]) end
    assert_raise ArgumentError, fn -> Apa.add([1, 2], [2, 3]) end
    assert_raise ArgumentError, fn -> Apa.sub([1, 2], [2, 3]) end
    assert_raise ArgumentError, fn -> Apa.mul([1, 2], [2, 3]) end
    assert_raise ArgumentError, fn -> Apa.div([1, 2], [2, 3]) end
  end

  test "wrong division by 0" do
    assert_raise ArgumentError, fn -> Apa.div("1", "0") end
    assert_raise ArgumentError, fn -> Apa.div("0", "0") end
  end

  test "add test" do
    assert Apa.add("1", "2") == "3"
    assert Apa.add("-1", "2") == "1"
    assert Apa.add({123, 0}, {654, 0}) == "777"
    assert ApaAdd.bc_add_apa_number({123, 0}, {654, 0}) == {777, 0}
    assert ApaAdd.bc_add_apa_number({333, 3}, {11_111_111, -1}) == {14_441_111, -1}
  end

  test "sub test" do
    assert Apa.sub("3", "2") == "1"
    assert Apa.sub({3, -21}, {3, -21}) == "0"
    assert ApaSub.bc_sub_apa_number({3, -21}, {3, -21}) == {0, -21}
  end

  test "mul test" do
    assert Apa.mul("3", "2") == "6"
    assert Apa.mul({3, 0}, {2, 0}) == "6"
    assert ApaMul.bc_mul_apa_number({3, 0}, {2, 0}) == {6, 0}
    assert ApaMul.bc_mul_apa_number({123, -2}, {45, 2}) == {5535, 0}
  end

  test "div test" do
    assert Apa.div("6", "2") == "3"
    assert Apa.div({6, 0}, {3, 0}) == "2"
    assert ApaDiv.bc_div_apa_number({6, 0}, {3, 0}) == {2, 0}

    assert ApaDiv.bc_div_apa_number({10, 0}, {3, 0}) ==
             {33_333_333_333_333_333_333_333_333_333, -28}
  end

  test "Apa.new test" do
    assert Apa.new("3") == {3, 0}
    assert Apa.new(3) == {3, 0}
    assert Apa.new(3.21) == {321, -2}
    assert Apa.new({3, 0}) == {3, 0}
  end

  test "Apa.cast test" do
    assert Apa.cast("3") == {:ok, {3, 0}}
    assert Apa.cast(3) == {:ok, {3, 0}}
    assert Apa.cast(3.21) == {:ok, {321, -2}}
    assert Apa.cast({3, 0}) == {:ok, {3, 0}}
  end

  test "Apa.parse test" do
    assert Apa.parse("3") == {3, 0}
    assert Apa.parse(3) == {3, 0}
    assert Apa.parse(3.21) == {321, -2}
    assert Apa.parse({3, 0}) == {3, 0}
  end

  test "Apa.from_integer test" do
    assert Apa.from_integer(3) == {3, 0}
  end

  test "Apa.from_float test" do
    assert Apa.from_float(3.21) == {321, -2}
  end

  test "Apa.from_string test" do
    assert Apa.from_string("3") == {3, 0}
    assert Apa.from_string("-3") == {-3, 0}
    assert Apa.from_string("+3") == {3, 0}
    assert Apa.from_string("03") == {3, 0}
    assert Apa.from_string("12345678901234567890123") == {12_345_678_901_234_567_890_123, 0}

    assert Apa.from_string("123456789012345678901234567890123456789012") ==
             {123_456_789_012_345_678_901_234_567_890_123_456_789_012, 0}

    assert Apa.from_string("1234567890123456789012345678901234567890123") ==
             {1_234_567_890_123_456_789_012_345_678_901_234_567_890_123, 0}

    assert Apa.from_string("+1234567890123456789012345678901234567890123") ==
             {1_234_567_890_123_456_789_012_345_678_901_234_567_890_123, 0}

    assert Apa.from_string("-1234567890123456789012345678901234567890123") ==
             {-1_234_567_890_123_456_789_012_345_678_901_234_567_890_123, 0}

    assert Apa.from_string("123456789012345678901234567890123456789012.3") ==
             {1_234_567_890_123_456_789_012_345_678_901_234_567_890_123, -1}

    assert Apa.from_string("123456789012345678901234567890123456789012.3e3") ==
             {1_234_567_890_123_456_789_012_345_678_901_234_567_890_123, 2}

    assert Apa.from_string("123456789012345678901234567890123456789012.3e-3") ==
             {1_234_567_890_123_456_789_012_345_678_901_234_567_890_123, -4}

    assert Apa.from_string("-12345678901234567890123") ==
             {-12_345_678_901_234_567_890_123, 0}

    assert Apa.from_string("+12345678901234567890123") ==
             {12_345_678_901_234_567_890_123, 0}

    assert Apa.from_string("012345678901234567890123") ==
             {12_345_678_901_234_567_890_123, 0}

    assert Apa.from_string("3e2") == {3, 2}
    assert Apa.from_string("+3e2") == {3, 2}
    assert Apa.from_string("+03e2") == {3, 2}
    assert Apa.from_string("-3e2") == {-3, 2}
    assert Apa.from_string("-03e2") == {-3, 2}
    assert Apa.from_string("-03e+02") == {-3, 2}
    assert Apa.from_string("3e-2") == {3, -2}
    assert Apa.from_string("3e-02") == {3, -2}
    assert Apa.from_string("-03e-02") == {-3, -2}
    assert Apa.from_string("-03E-02") == {-3, -2}
    assert Apa.from_string("-03E-02 euro") == {-3, -2}

    assert Apa.from_string("-0012345678901234567890123E-02 euro") ==
             {-12_345_678_901_234_567_890_123, -2}

    assert Apa.from_string("-0012345678901234567890123E02 euro") ==
             {-12_345_678_901_234_567_890_123, 2}

    assert Apa.from_string("-03.") == {-3, 0}
    assert Apa.from_string("-03.e") == {-3, 0}
    assert Apa.from_string("-03.0e") == {-3, 0}
    assert Apa.from_string("-03.01e") == {-301, -2}
    assert Apa.from_string("-030.01e") == {-3001, -2}
    assert Apa.from_string("-30010.01000e-01") == {-3_001_001, -3}
  end

  test "Apa.to_string test" do
    assert Apa.to_string({3, 0}) == "3"
    assert Apa.to_string({3, 0}) == "3"
  end

  test "ApaNumber.pow10 test" do
    assert ApaNumber.pow10(3) == 1000
    assert ApaNumber.pow10(0) == 1
    assert ApaNumber.pow10(-1) == :error

    assert ApaNumber.pow10(105) ==
             1_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000

    # pow10_max
    assert ApaNumber.pow10(106) ==
             10_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
  end

  test "ApaNumber.base10? test" do
    assert ApaNumber.base10?(10) == true
    assert ApaNumber.base10?(100) == true

    # pow10_max test 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    assert ApaNumber.base10?(
             10_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
           ) == true

    assert ApaNumber.base10?(3) == false

    assert ApaNumber.base10?(-1) == :error
  end

  test "ApaNumber.shift_to test" do
    assert ApaNumber.shift_to({3, -1}, -2) == {30, -2}
  end

  test "Apa.add - some random numbers - also with leading and trailing zeros" do
    for _n <- 1..1 do
      left =
        Enum.take(
          StreamData.integer(0..9),
          300
        )
        |> Enum.join("")

      right =
        Enum.take(
          StreamData.integer(0..9),
          300
        )
        |> Enum.join()

      Apa.add(left, right)
      assert true == true
    end
  end

  test "elixir_add - some random numbers - also with leading and trailing zeros" do
    for _n <- 1..1 do
      left =
        Enum.take(
          StreamData.integer(0..9),
          300
        )
        |> Enum.join("")

      right =
        Enum.take(
          StreamData.integer(0..9),
          300
        )
        |> Enum.join()

      elixir_int_add(left, right)
    end

    assert true == true
  end

  test "Apa.add - apa_float test - a little bench" do
    # test with int as string and for n <- 1..1_000_000 do : 12 s
    # test with int and for n <- 1..1_000_000 do : 7 s
    # test with float and for n <- 1..1_000_000 do : 103 s - this is a little bit slow - I need to check why
    # test with float and for n <- 1..1_000_000 do : 31 s - after optimization
    # test php with int bcmath : 2 s
    # test php with float bcmath : 2 s
    # <?php
    # $start = time();
    # for ($i = 1; $i <= 1000000; $i++) {
    #   $a = "8.09707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442".$i;
    #   $b = $i."1.25737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472";
    #   $res = bcadd($a, $b);
    # }
    # $end= time();
    # echo "\n".($end-$start)." s\n";
    # echo $res."\n";
    # ?>

    for n <- 1..1 do
      #   809_707_454_052_413_919_635_577_888_440_715_258_946_580_668_428_775_950_474_824_953_017_506_360_127_420_091_940_038_046_771_237_888_664_887_342_053_220_951_123_102_876_333_457_480_052_728_109_806_574_848_871_628_692_024_581_572_876_970_116_185_613_895_631_093_241_810_791_852_687_225_130_663_407_994_467_397_555_082_232_868_305_473_303_185_501_486_875_439_373_305_931_251_988_752_888_510_867_191_442 +
      #     n
      left =
        "809707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442" <>
          Integer.to_string(n)

      # n +
      #   125_737_664_273_696_274_550_555_428_050_391_992_223_318_427_580_244_856_987_886_515_040_304_820_544_244_089_003_522_386_442_562_821_180_853_835_547_526_988_580_462_516_459_446_335_918_383_321_800_211_590_949_268_950_790_878_470_723_946_424_249_952_005_158_462_419_536_507_105_822_922_117_803_735_975_930_795_427_833_559_882_975_690_208_258_765_127_313_622_053_819_431_639_645_657_225_314_642_357_472
      right =
        Integer.to_string(n) <>
          "125737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472"

      # 14 s
      Integer.parse(left)
      Integer.parse(right)
      # 29 s
      # Apa.add(left, right)
      # assert Apa.add(left, right) ==
      #          "19.354451183261101941861333164911072511698990960090208074627114680578111806716641809435604332138007098457411776007479397035653927929038159711114316067864398208976428154600436009165404355659007895556613472989585101472484671439703981929829157927512811635114442666141890614271253628916344101138255095489141"
    end

    assert "19.354451183261101941861333164911072511698990960090208074627114680578111806716641809435604332138007098457411776007479397035653927929038159711114316067864398208976428154600436009165404355659007895556613472989585101472484671439703981929829157927512811635114442666141890614271253628916344101138255095489141" ==
             "19.354451183261101941861333164911072511698990960090208074627114680578111806716641809435604332138007098457411776007479397035653927929038159711114316067864398208976428154600436009165404355659007895556613472989585101472484671439703981929829157927512811635114442666141890614271253628916344101138255095489141"
  end

  test "elixir_add - int test with strings - a little bench" do
    # test with int and for n <- 1..1_000_000 do : 12 s
    # test php with int bcmath                   : 2 s
    # <?php
    # $start = time();
    # for ($i = 1; $i <= 1000000; $i++) {
    #   $a = "809707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442".$i;
    #   $b = $i."125737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472";
    #   $res = bcadd($a, $b);
    # }
    # $end= time();
    # echo "\n".($end-$start)." s\n";
    # echo $res."\n";
    # ?>

    for n <- 1..1 do
      #   809_707_454_052_413_919_635_577_888_440_715_258_946_580_668_428_775_950_474_824_953_017_506_360_127_420_091_940_038_046_771_237_888_664_887_342_053_220_951_123_102_876_333_457_480_052_728_109_806_574_848_871_628_692_024_581_572_876_970_116_185_613_895_631_093_241_810_791_852_687_225_130_663_407_994_467_397_555_082_232_868_305_473_303_185_501_486_875_439_373_305_931_251_988_752_888_510_867_191_442 +
      #     n
      left =
        "809707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442" <>
          Integer.to_string(n)

      # n +
      #   125_737_664_273_696_274_550_555_428_050_391_992_223_318_427_580_244_856_987_886_515_040_304_820_544_244_089_003_522_386_442_562_821_180_853_835_547_526_988_580_462_516_459_446_335_918_383_321_800_211_590_949_268_950_790_878_470_723_946_424_249_952_005_158_462_419_536_507_105_822_922_117_803_735_975_930_795_427_833_559_882_975_690_208_258_765_127_313_622_053_819_431_639_645_657_225_314_642_357_472
      right =
        Integer.to_string(n) <>
          "125737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472"

      elixir_int_string_add(left, right)
    end

    assert true == true
  end

  test "elixir_add - int test without string conversion - a little bench" do
    # test with int and for n <- 1..1_000_000 do : 0.2 s
    # test php with int bcmath                   : 2 s
    # by the way - funny Elixir is much faster with the same precision!!! (of course without string conversation)
    # <?php
    # $start = time();
    # for ($i = 1; $i <= 1000000; $i++) {
    #   $a = "809707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442".$i;
    #   $b = $i."125737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472";
    #   $res = bcadd($a, $b);
    # }
    # $end= time();
    # echo "\n".($end-$start)." s\n";
    # echo $res."\n";
    # ?>

    for n <- 1..1 do
      left =
        809_707_454_052_413_919_635_577_888_440_715_258_946_580_668_428_775_950_474_824_953_017_506_360_127_420_091_940_038_046_771_237_888_664_887_342_053_220_951_123_102_876_333_457_480_052_728_109_806_574_848_871_628_692_024_581_572_876_970_116_185_613_895_631_093_241_810_791_852_687_225_130_663_407_994_467_397_555_082_232_868_305_473_303_185_501_486_875_439_373_305_931_251_988_752_888_510_867_191_442 +
          n

      right =
        n +
          125_737_664_273_696_274_550_555_428_050_391_992_223_318_427_580_244_856_987_886_515_040_304_820_544_244_089_003_522_386_442_562_821_180_853_835_547_526_988_580_462_516_459_446_335_918_383_321_800_211_590_949_268_950_790_878_470_723_946_424_249_952_005_158_462_419_536_507_105_822_922_117_803_735_975_930_795_427_833_559_882_975_690_208_258_765_127_313_622_053_819_431_639_645_657_225_314_642_357_472

      elixir_int_add(left, right)
    end

    assert true == true
  end

  test "elixir_add - float test - a little bench" do
    # test with float and n <- 1..1_000_000  : 13 s
    # test php with float bcmath             : 2 s
    # <?php
    # $start = time();
    # for ($i = 1; $i <= 1000000; $i++) {
    #   $a = "8.09707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442".$i;
    #   $b = $i."1.25737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472";
    #   $res = bcadd($a, $b);
    # }
    # $end= time();
    # echo "\n".($end-$start)." s\n";
    # echo $res."\n";
    # ?>

    for n <- 1..1 do
      left =
        "8.09707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442#{
          n
        }"

      right =
        "#{n}1.25737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472"

      elixir_float_string_add(left, right)
    end

    assert true == true
  end

  test "elixir_add - float test without string conversion - a little bench" do
    # test with float and n <- 1..1_000_000  : 0.2 s
    # test php with float bcmath             : 2 s
    # <?php
    # $start = time();
    # for ($i = 1; $i <= 1000000; $i++) {
    #   $a = "8.09707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442".$i;
    #   $b = $i."1.25737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472";
    #   $res = bcadd($a, $b);
    # }
    # $end= time();
    # echo "\n".($end-$start)." s\n";
    # echo $res."\n";
    # ?>

    for n <- 1..1 do
      left =
        8.09707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442 +
          n

      right =
        n +
          1.25737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472

      elixir_float_add(left, right)
    end

    assert true == true
  end

  test "some special apa tests" do
    assert "46.83" == Apa.add("1.23", "45.6")
    assert "45600000012.4" == Apa.add("12.3", "45600000000.1")
    assert "0.123456000000001" == Apa.add("0.123", "0.000456000000001")
    assert "0.123456000000001" == Apa.add("0.000456000000001", "0.123")
    assert "579" == "123" + "456"
    assert "123000000000000000000456" == "123000000000000000000000" + "456"
    assert "4560000000000000000123" == "123" + "4560000000000000000000"
    assert "0.00000000000000001" == "3.30000000000000004" - "3.30000000000000003"
    assert "6.71111111111111107" == "3.31111111111111114" + "3.39999999999999993"
    assert "579" == Kernel.to_string(123 + 456)
    assert "690" == Kernel.to_string(123 + 456) + "111"
    assert "12300" == Apa.to_string({123, 2})
    assert "456000" == Apa.to_string({456, 3})
    assert "45600" == Apa.to_string({456, 2})
    assert "456001.23" == "1.23" + "456e3"
    assert "456001.23" == "1.23" + "456.0e+003"
    assert {579, 2} == {123, 2} + {456, 2}
    assert {333, 2} == {456, 2} - {123, 2}
    assert {56_088, 4} == {456, 2} * {123, 2}
    assert {3, -1} == {999, -1} / {333, 0}
    assert 56_088 == 456 * 123
    assert 3.707317073170732 == 456 / 123

    assert "132342342342300000000455987.88" ==
             "132342342342300000000000000" + "456e3" - "0012.1200"

    assert "48.884" == "2.2" * "22.22"
    assert "4444444444.4444444444444" == "0.00000000002" * "222222222222222222222.22"
    assert "-48.884" == "0002.20000000" * "-00022.22000000"
    assert "222.2001" == "0.1" * "2222.001"
    assert "10" == "2222.001" / "222.2001"

    # assert "4.803996494145874505235775423334130118361854870657100757394670069275408183992252107271953952558746062366945316980162297254682795391215837841902139087243471693370187446483540777998857567381640950710429242683886201142208171872141814268287619195112453301102817813419879898684855809965648465178810904957012886595045792694491" ==
    #          "17.123" / "3.564324"
    assert "4.8039964941458745052357" ==
             "17.123" / "3.564324"

    assert "300.33" == "300.11 Euro" + "0.22"
    assert "3001.23" == "30010.10e-1" + "0.22"
    assert "3001.23" == "3001.010 Euro" + "0.22"

    price = "3.51 Euro"
    quantity = "12"
    total_string = price * quantity
    assert total_string == "42.12"
  end

  test "scale tests" do
    assert "1.2300" == Apa.to_string({123, -2}, 4)

    assert "12300" == Apa.to_string({123, 2}, -1)
    assert "-12300" == Apa.to_string({-123, 2}, -1)

    assert "-1234500" == Apa.to_string({-12_345, 2}, -1)
    assert "123.45" == Apa.to_string({12_345, -2}, -1)

    assert "123.45" == Apa.to_string({12_345, -2}, -1)
    assert "123.45" == Apa.to_string({12_345, -2}, -1)

    assert "123.45" == Apa.to_string({12_345, -2}, -1)
    assert "123.4" == Apa.to_string({12_345, -2}, 1)

    assert "123.45" == Apa.to_string({12_345, -2}, 2)
    assert "0.012345" == Apa.to_string({12_345, -6}, 6)
    assert "0.012345000" == Apa.to_string({12_345_000, -9}, 9)
    assert "-0.012345000" == Apa.to_string({-12_345_000, -9}, 9)
    assert "-0.01234" == Apa.to_string({-12_345_678, -9}, 5)
    assert "-0.01234567" == Apa.to_string({-12_345_678, -9}, 8)

    assert "1.23" == Apa.to_string({123, -2}, 2)
    assert "123.00" == Apa.to_string({123, 0}, 2)

    assert "55" == Apa.add("12.34", "43.21", 0)
    assert "55.55" == Apa.add("12.34", "43.21", 2)
    assert "-55.55" == Apa.add("-12.34", "-43.21", 2)

    assert "-3.33" == Apa.div("-10", "3", 2)
  end

  test "special div tests" do
    assert "-333333333333333333333.33" == Apa.div("-1000000000000000000000", "3", 2)
  end

  # private helper

  defp elixir_int_add(left, right) do
    left + right
  end

  defp elixir_int_string_add(left, right) do
    Integer.to_string(String.to_integer(left) + String.to_integer(right))
  end

  # only for performance testing - the result for such a big number in normal elixir is wrong!!!
  defp elixir_float_add(left, right) do
    left + right
  end

  defp elixir_float_string_add(left, right) do
    Float.to_string(String.to_float(left) + String.to_float(right))
  end
end
