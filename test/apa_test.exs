defmodule ApaTest do
  use ExUnit.Case
  doctest Apa
  doctest ApaNumber
  doctest ApaComp

  @moduledoc """
  Documentation for `ApaTest`.
  """

  test "wrong input" do
    assert_raise ArgumentError, fn -> Apa.add(1, 2) end
  end

  test "add test" do
    assert Apa.add("1", "2") == "3"
  end

  test "sub test" do
    assert Apa.sub("3", "2") == "1"
  end

  test "Apa.add - property test - a little bench" do
    # test with int and for n <- 1..1_000_000 do : 12 s
    # test with float and for n <- 1..1_000_000 do : 103 s - this is a little bit slow - but lets see later why
    # test php with int bcmath : 2 s
    # test php with float bcmath : 2 s
    # <?php
    # $start = time();
    # for ($i = 1; $i <= 1000000; $i++) {
    #   $a = "809707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442".$i;
    #   $b = $i."125737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472";
    #   $res = bcadd($a, $b);
    # }
    # $end= time();
    # echo "\n".($end-$start)." s\n";
    # echo $res."\n";
    # ?>

    for n <- 1..1 do
      left =
        "8.09707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442#{
          n
        }"

      right =
        "#{n}1.25737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472"

      Apa.add(left, right)
    end

    assert "19.354451183261101941861333164911072511698990960090208074627114680578111806716641809435604332138007098457411776007479397035653927929038159711114316067864398208976428154600436009165404355659007895556613472989585101472484671439703981929829157927512811635114442666141890614271253628916344101138255095489141" ==
             "19.354451183261101941861333164911072511698990960090208074627114680578111806716641809435604332138007098457411776007479397035653927929038159711114316067864398208976428154600436009165404355659007895556613472989585101472484671439703981929829157927512811635114442666141890614271253628916344101138255095489141"
  end

  test "Apa.add - property test - some random numbers - also with leading and trailing zeros" do
    for _n <- 1..1 do
      left =
        Enum.take(
          StreamData.integer(0..9),
          300
        )
        |> Enum.join("")

      right =
        Enum.take(
          StreamData.integer(0..9),
          300
        )
        |> Enum.join()

      Apa.add(left, right)
    end

    assert true == true
  end

  test "elixir_add - property test - a little bench" do
    # test with int and for n <- 1..1_000_000 do : 12 s
    # test with float and for n <- 1..1_000_000 do : 13 s
    # test php with int bcmath : 2 s
    # test php with float bcmath : 2 s
    # <?php
    # $start = time();
    # for ($i = 1; $i <= 1000000; $i++) {
    #   $a = "809707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442".$i;
    #   $b = $i."125737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472";
    #   $res = bcadd($a, $b);
    # }
    # $end= time();
    # echo "\n".($end-$start)." s\n";
    # echo $res."\n";
    # ?>

    for n <- 1..1 do
      left =
        "809707454052413919635577888440715258946580668428775950474824953017506360127420091940038046771237888664887342053220951123102876333457480052728109806574848871628692024581572876970116185613895631093241810791852687225130663407994467397555082232868305473303185501486875439373305931251988752888510867191442#{
          n
        }"

      right =
        "#{n}125737664273696274550555428050391992223318427580244856987886515040304820544244089003522386442562821180853835547526988580462516459446335918383321800211590949268950790878470723946424249952005158462419536507105822922117803735975930795427833559882975690208258765127313622053819431639645657225314642357472"

      elixir_int_add(left, right)
      # elixir_float_add(left, right)
    end

    assert true == true
  end

  test "elixir_add - property test - some random numbers - also with leading and trailing zeros" do
    for _n <- 1..1 do
      left =
        Enum.take(
          StreamData.integer(0..9),
          300
        )
        |> Enum.join("")

      right =
        Enum.take(
          StreamData.integer(0..9),
          300
        )
        |> Enum.join()

      elixir_int_add(left, right)
    end

    assert true == true
  end

  defp elixir_int_add(left, right) do
    to_string(String.to_integer(left) + String.to_integer(right))
  end

  defp elixir_float_add(left, right) do
    # only for performance testing - the result for such a big number in normal elixir is wrong!!!
    to_string(String.to_float(left) + String.to_float(right))
  end
end
